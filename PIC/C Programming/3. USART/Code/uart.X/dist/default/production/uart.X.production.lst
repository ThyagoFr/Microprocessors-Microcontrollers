

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Nov 10 14:00:37 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.10
    17                           ; Generated 31/07/2019 GMT
    18                           ; 
    19                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F628A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0086                     	;# 
    77  008C                     	;# 
    78  008E                     	;# 
    79  0092                     	;# 
    80  0098                     	;# 
    81  0099                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009F                     	;# 
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000E                     	;# 
    98  000E                     	;# 
    99  000F                     	;# 
   100  0010                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  008C                     	;# 
   115  008E                     	;# 
   116  0092                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009F                     	;# 
   124                           
   125                           	psect	idataBANK0
   126  0688                     __pidataBANK0:	
   127                           
   128                           ;initializer for main@F486
   129  0688  3465               	retlw	101
   130  0689  3475               	retlw	117
   131  068A  3420               	retlw	32
   132  068B  3473               	retlw	115
   133  068C  346F               	retlw	111
   134  068D  3475               	retlw	117
   135  068E  3420               	retlw	32
   136  068F  346F               	retlw	111
   137  0690  3420               	retlw	32
   138  0691  3462               	retlw	98
   139  0692  3469               	retlw	105
   140  0693  3478               	retlw	120
   141  0694  3461               	retlw	97
   142  0695  346F               	retlw	111
   143  0696  3420               	retlw	32
   144  0697  346D               	retlw	109
   145  0698  3465               	retlw	101
   146  0699  3472               	retlw	114
   147  069A  346D               	retlw	109
   148  069B  346F               	retlw	111
   149  069C  3420               	retlw	32
   150  069D  3465               	retlw	101
   151  069E  3469               	retlw	105
   152  069F  346E               	retlw	110
   153  06A0  3400               	retlw	0
   154  0019                     _TXREG	set	25
   155  001A                     _RCREG	set	26
   156  000C                     _PIR1bits	set	12
   157  0018                     _RCSTAbits	set	24
   158  0086                     _TRISBbits	set	134
   159  0099                     _SPBRG	set	153
   160  0098                     _TXSTAbits	set	152
   161                           
   162                           	psect	cinit
   163  07F4                     start_initialization:	
   164                           ; #config settings
   165                           
   166  07F4                     __initialization:	
   167                           
   168                           ; Initialize objects allocated to BANK0
   169  07F4  1383               	bcf	3,7	;select IRP bank0
   170  07F5  306E               	movlw	low (__pdataBANK0+25)
   171  07F6  00FD               	movwf	btemp+-1
   172  07F7  3006               	movlw	high __pidataBANK0
   173  07F8  00FE               	movwf	btemp
   174  07F9  3088               	movlw	low __pidataBANK0
   175  07FA  00FF               	movwf	btemp+1
   176  07FB  3055               	movlw	low __pdataBANK0
   177  07FC  0084               	movwf	4
   178  07FD  267D               	fcall	init_ram0
   179  07FE                     end_of_initialization:	
   180                           ;End of C runtime variable initialization code
   181                           
   182  07FE                     __end_of__initialization:	
   183  07FE  0183               	clrf	3
   184  07FF  2EA1               	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	dataBANK0
   187  0055                     __pdataBANK0:	
   188  0055                     main@F486:	
   189  0055                     	ds	25
   190                           
   191                           	psect	inittext
   192  0679                     init_fetch0:	
   193                           ;	Called with low address in FSR and high address in W
   194                           
   195  0679  087E               	movf	btemp,w
   196  067A  008A               	movwf	10
   197  067B  087F               	movf	btemp+1,w
   198  067C  0082               	movwf	2
   199  067D                     init_ram0:	
   200                           ;Called with:
   201                           ;	high address of idata address in btemp 
   202                           ;	low address of idata address in btemp+1 
   203                           ;	low address of data in FSR
   204                           ;	high address + 1 of data in btemp-1
   205                           
   206  067D  2679               	fcall	init_fetch0
   207  067E  0080               	movwf	0
   208  067F  0A84               	incf	4,f
   209  0680  0804               	movf	4,w
   210  0681  067D               	xorwf	btemp+-1,w
   211  0682  1903               	btfsc	3,2
   212  0683  3400               	retlw	0
   213  0684  0AFF               	incf	btemp+1,f
   214  0685  1903               	btfsc	3,2
   215  0686  0AFE               	incf	btemp,f
   216  0687  2E7D               	goto	init_ram0
   217                           
   218                           	psect	cstackCOMMON
   219  0070                     __pcstackCOMMON:	
   220  0070                     ?_UART_Write:	
   221  0070                     ??_UART_Write:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_main:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?___aldiv:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     UART_Write@data:	
   231                           ; 4 bytes @ 0x0
   232                           
   233  0070                     ___aldiv@divisor:	
   234                           ; 1 bytes @ 0x0
   235                           
   236                           
   237                           ; 4 bytes @ 0x0
   238  0070                     	ds	4
   239  0074                     ___aldiv@dividend:	
   240                           
   241                           ; 4 bytes @ 0x4
   242  0074                     	ds	4
   243  0078                     ??___aldiv:	
   244                           
   245                           ; 1 bytes @ 0x8
   246  0078                     	ds	1
   247  0079                     UART_Init@x:	
   248                           
   249                           ; 2 bytes @ 0x9
   250  0079                     	ds	2
   251                           
   252                           	psect	cstackBANK0
   253  0020                     __pcstackBANK0:	
   254  0020                     ___aldiv@counter:	
   255                           
   256                           ; 1 bytes @ 0x0
   257  0020                     	ds	1
   258  0021                     ___aldiv@sign:	
   259                           
   260                           ; 1 bytes @ 0x1
   261  0021                     	ds	1
   262  0022                     ___aldiv@quotient:	
   263                           
   264                           ; 4 bytes @ 0x2
   265  0022                     	ds	4
   266  0026                     ?_UART_Init:	
   267  0026                     UART_Init@baudrate:	
   268                           ; 1 bytes @ 0x6
   269                           
   270                           
   271                           ; 4 bytes @ 0x6
   272  0026                     	ds	4
   273  002A                     ??_UART_Init:	
   274                           
   275                           ; 1 bytes @ 0xA
   276  002A                     	ds	12
   277  0036                     ??_main:	
   278                           
   279                           ; 1 bytes @ 0x16
   280  0036                     	ds	4
   281  003A                     main@frase:	
   282                           
   283                           ; 25 bytes @ 0x1A
   284  003A                     	ds	25
   285  0053                     main@i:	
   286                           
   287                           ; 2 bytes @ 0x33
   288  0053                     	ds	2
   289                           
   290                           	psect	maintext
   291  06A1                     __pmaintext:	
   292 ;;
   293 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   294 ;;
   295 ;; *************** function _main *****************
   296 ;; Defined at:
   297 ;;		line 12 in file "code.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;		None
   300 ;; Auto vars:     Size  Location     Type
   301 ;;  i               2   51[BANK0 ] int 
   302 ;;  frase          25   26[BANK0 ] unsigned char [25]
   303 ;; Return value:  Size  Location     Type
   304 ;;                  1    wreg      void 
   305 ;; Registers used:
   306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   307 ;; Tracked objects:
   308 ;;		On entry : B00/0
   309 ;;		On exit  : 0/0
   310 ;;		Unchanged: 0/0
   311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   312 ;;      Params:         0       0       0       0
   313 ;;      Locals:         0      27       0       0
   314 ;;      Temps:          0       4       0       0
   315 ;;      Totals:         0      31       0       0
   316 ;;Total ram usage:       31 bytes
   317 ;; Hardware stack levels required when called:    2
   318 ;; This function calls:
   319 ;;		_UART_Init
   320 ;;		_UART_Write
   321 ;; This function is called by:
   322 ;;		Startup code after reset
   323 ;; This function uses a non-reentrant model
   324 ;;
   325                           
   326                           
   327                           ;psect for function _main
   328  06A1                     _main:	
   329  06A1                     l835:	
   330                           ;incstack = 0
   331                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   332                           
   333                           
   334                           ;code.c: 13:     UART_Init(9600);
   335  06A1  3000               	movlw	0
   336  06A2  1283               	bcf	3,5	;RP0=0, select bank0
   337  06A3  1303               	bcf	3,6	;RP1=0, select bank0
   338  06A4  00A9               	movwf	UART_Init@baudrate+3
   339  06A5  3000               	movlw	0
   340  06A6  00A8               	movwf	UART_Init@baudrate+2
   341  06A7  3025               	movlw	37
   342  06A8  00A7               	movwf	UART_Init@baudrate+1
   343  06A9  3080               	movlw	128
   344  06AA  00A6               	movwf	UART_Init@baudrate
   345  06AB  26F0               	fcall	_UART_Init
   346  06AC                     l837:	
   347                           
   348                           ;code.c: 14:     char frase [25] = "eu sou o bixao mermo ein";
   349  06AC  303A               	movlw	main@frase& (0+255)
   350  06AD  0084               	movwf	4
   351  06AE  3055               	movlw	low main@F486
   352  06AF  1283               	bcf	3,5	;RP0=0, select bank0
   353  06B0  1303               	bcf	3,6	;RP1=0, select bank0
   354  06B1  00B6               	movwf	??_main
   355  06B2  0804               	movf	4,w
   356  06B3  00B7               	movwf	??_main+1
   357  06B4  3019               	movlw	25
   358  06B5  00B8               	movwf	??_main+2
   359  06B6                     u350:	
   360  06B6  0836               	movf	??_main,w
   361  06B7  0084               	movwf	4
   362  06B8  1383               	bcf	3,7	;select IRP bank0
   363  06B9  0800               	movf	0,w
   364  06BA  00B9               	movwf	??_main+3
   365  06BB  0AB6               	incf	??_main,f
   366  06BC  0837               	movf	??_main+1,w
   367  06BD  0084               	movwf	4
   368  06BE  0839               	movf	??_main+3,w
   369  06BF  0080               	movwf	0
   370  06C0  0AB7               	incf	??_main+1,f
   371  06C1  0BB8               	decfsz	??_main+2,f
   372  06C2  2EB6               	goto	u350
   373  06C3                     l839:	
   374                           
   375                           ;code.c: 16:     for(int i = 0; frase[i] != '\0' ; i++){
   376  06C3  01D3               	clrf	main@i
   377  06C4  01D4               	clrf	main@i+1
   378  06C5  2EE2               	goto	l847
   379  06C6                     l841:	
   380                           
   381                           ;code.c: 17:         UART_Write(frase[i]);
   382  06C6  0853               	movf	main@i,w
   383  06C7  3E3A               	addlw	(low (main@frase| 0))& (0+255)
   384  06C8  0084               	movwf	4
   385  06C9  0800               	movf	0,w
   386  06CA  266D               	fcall	_UART_Write
   387  06CB                     l843:	
   388                           
   389                           ;code.c: 18:         _delay((unsigned long)((500)*(4000000/4000.0)));
   390  06CB  3003               	movlw	3
   391  06CC  1283               	bcf	3,5	;RP0=0, select bank0
   392  06CD  1303               	bcf	3,6	;RP1=0, select bank0
   393  06CE  00B8               	movwf	??_main+2
   394  06CF  308A               	movlw	138
   395  06D0  00B7               	movwf	??_main+1
   396  06D1  3055               	movlw	85
   397  06D2  00B6               	movwf	??_main
   398  06D3                     u377:	
   399  06D3  0BB6               	decfsz	??_main,f
   400  06D4  2ED3               	goto	u377
   401  06D5  0BB7               	decfsz	??_main+1,f
   402  06D6  2ED3               	goto	u377
   403  06D7  0BB8               	decfsz	??_main+2,f
   404  06D8  2ED3               	goto	u377
   405  06D9  0000               	nop
   406  06DA                     l845:	
   407                           
   408                           ;code.c: 19:     };
   409  06DA  3001               	movlw	1
   410  06DB  1283               	bcf	3,5	;RP0=0, select bank0
   411  06DC  1303               	bcf	3,6	;RP1=0, select bank0
   412  06DD  07D3               	addwf	main@i,f
   413  06DE  1803               	skipnc
   414  06DF  0AD4               	incf	main@i+1,f
   415  06E0  3000               	movlw	0
   416  06E1  07D4               	addwf	main@i+1,f
   417  06E2                     l847:	
   418  06E2  0853               	movf	main@i,w
   419  06E3  3E3A               	addlw	(low (main@frase| 0))& (0+255)
   420  06E4  0084               	movwf	4
   421  06E5  1383               	bcf	3,7	;select IRP bank0
   422  06E6  0800               	movf	0,w
   423  06E7  1D03               	btfss	3,2
   424  06E8  2EEA               	goto	u361
   425  06E9  2EEB               	goto	u360
   426  06EA                     u361:	
   427  06EA  2EC6               	goto	l841
   428  06EB                     u360:	
   429  06EB                     l849:	
   430                           
   431                           ;code.c: 20:     UART_Write('\n');
   432  06EB  300A               	movlw	10
   433  06EC  266D               	fcall	_UART_Write
   434                           
   435                           ;code.c: 21:     UART_Write('\r');
   436  06ED  300D               	movlw	13
   437  06EE  266D               	fcall	_UART_Write
   438  06EF                     l59:	
   439  06EF  2800               	ljmp	start
   440  06F0                     __end_of_main:	
   441                           
   442                           	psect	text1
   443  066D                     __ptext1:	
   444 ;; *************** function _UART_Write *****************
   445 ;; Defined at:
   446 ;;		line 38 in file "./uart.h"
   447 ;; Parameters:    Size  Location     Type
   448 ;;  data            1    wreg     unsigned char 
   449 ;; Auto vars:     Size  Location     Type
   450 ;;  data            1    0[COMMON] unsigned char 
   451 ;; Return value:  Size  Location     Type
   452 ;;                  1    wreg      void 
   453 ;; Registers used:
   454 ;;		wreg
   455 ;; Tracked objects:
   456 ;;		On entry : 0/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   460 ;;      Params:         0       0       0       0
   461 ;;      Locals:         1       0       0       0
   462 ;;      Temps:          0       0       0       0
   463 ;;      Totals:         1       0       0       0
   464 ;;Total ram usage:        1 bytes
   465 ;; Hardware stack levels used:    1
   466 ;; This function calls:
   467 ;;		Nothing
   468 ;; This function is called by:
   469 ;;		_main
   470 ;;		_UART_Write_Text
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           
   475                           ;psect for function _UART_Write
   476  066D                     _UART_Write:	
   477                           
   478                           ;incstack = 0
   479                           ; Regs used in _UART_Write: [wreg]
   480                           ;UART_Write@data stored from wreg
   481  066D  00F0               	movwf	UART_Write@data
   482  066E                     l823:	
   483  066E                     l40:	
   484                           ;./uart.h: 39:   while(!TXSTAbits.TRMT);
   485                           
   486  066E  1683               	bsf	3,5	;RP0=1, select bank1
   487  066F  1303               	bcf	3,6	;RP1=0, select bank1
   488  0670  1C98               	btfss	24,1	;volatile
   489  0671  2E73               	goto	u331
   490  0672  2E74               	goto	u330
   491  0673                     u331:	
   492  0673  2E6E               	goto	l40
   493  0674                     u330:	
   494  0674                     l825:	
   495                           
   496                           ;./uart.h: 40:   TXREG = data;
   497  0674  0870               	movf	UART_Write@data,w
   498  0675  1283               	bcf	3,5	;RP0=0, select bank0
   499  0676  1303               	bcf	3,6	;RP1=0, select bank0
   500  0677  0099               	movwf	25	;volatile
   501  0678                     l43:	
   502  0678  0008               	return
   503  0679                     __end_of_UART_Write:	
   504                           
   505                           	psect	text2
   506  06F0                     __ptext2:	
   507 ;; *************** function _UART_Init *****************
   508 ;; Defined at:
   509 ;;		line 4 in file "./uart.h"
   510 ;; Parameters:    Size  Location     Type
   511 ;;  baudrate        4    6[BANK0 ] const long 
   512 ;; Auto vars:     Size  Location     Type
   513 ;;  x               2    9[COMMON] unsigned int 
   514 ;; Return value:  Size  Location     Type
   515 ;;                  1    wreg      unsigned char 
   516 ;; Registers used:
   517 ;;		wreg, status,2, status,0, pclath, cstack
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   523 ;;      Params:         0       4       0       0
   524 ;;      Locals:         2       0       0       0
   525 ;;      Temps:          0      12       0       0
   526 ;;      Totals:         2      16       0       0
   527 ;;Total ram usage:       18 bytes
   528 ;; Hardware stack levels used:    1
   529 ;; Hardware stack levels required when called:    1
   530 ;; This function calls:
   531 ;;		___aldiv
   532 ;; This function is called by:
   533 ;;		_main
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           
   538                           ;psect for function _UART_Init
   539  06F0                     _UART_Init:	
   540  06F0                     l803:	
   541                           ;incstack = 0
   542                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   543                           
   544                           
   545                           ;./uart.h: 6:  unsigned int x;;./uart.h: 7:  x = (4000000 - baudrate*16)/(baudrate*16);
   546  06F0  1283               	bcf	3,5	;RP0=0, select bank0
   547  06F1  1303               	bcf	3,6	;RP1=0, select bank0
   548  06F2  0826               	movf	UART_Init@baudrate,w
   549  06F3  00AA               	movwf	??_UART_Init
   550  06F4  0827               	movf	UART_Init@baudrate+1,w
   551  06F5  00AB               	movwf	??_UART_Init+1
   552  06F6  0828               	movf	UART_Init@baudrate+2,w
   553  06F7  00AC               	movwf	??_UART_Init+2
   554  06F8  0829               	movf	UART_Init@baudrate+3,w
   555  06F9  00AD               	movwf	??_UART_Init+3
   556  06FA  3004               	movlw	4
   557  06FB                     u305:	
   558  06FB  1003               	clrc
   559  06FC  0DAA               	rlf	??_UART_Init,f
   560  06FD  0DAB               	rlf	??_UART_Init+1,f
   561  06FE  0DAC               	rlf	??_UART_Init+2,f
   562  06FF  0DAD               	rlf	??_UART_Init+3,f
   563  0700                     u300:	
   564  0700  3EFF               	addlw	-1
   565  0701  1D03               	skipz
   566  0702  2EFB               	goto	u305
   567  0703  082D               	movf	??_UART_Init+3,w
   568  0704  00F3               	movwf	___aldiv@divisor+3
   569  0705  082C               	movf	??_UART_Init+2,w
   570  0706  00F2               	movwf	___aldiv@divisor+2
   571  0707  082B               	movf	??_UART_Init+1,w
   572  0708  00F1               	movwf	___aldiv@divisor+1
   573  0709  082A               	movf	??_UART_Init,w
   574  070A  00F0               	movwf	___aldiv@divisor
   575  070B  0826               	movf	UART_Init@baudrate,w
   576  070C  00AE               	movwf	??_UART_Init+4
   577  070D  0827               	movf	UART_Init@baudrate+1,w
   578  070E  00AF               	movwf	??_UART_Init+5
   579  070F  0828               	movf	UART_Init@baudrate+2,w
   580  0710  00B0               	movwf	??_UART_Init+6
   581  0711  0829               	movf	UART_Init@baudrate+3,w
   582  0712  00B1               	movwf	??_UART_Init+7
   583  0713  3004               	movlw	4
   584  0714                     u315:	
   585  0714  1003               	clrc
   586  0715  0DAE               	rlf	??_UART_Init+4,f
   587  0716  0DAF               	rlf	??_UART_Init+5,f
   588  0717  0DB0               	rlf	??_UART_Init+6,f
   589  0718  0DB1               	rlf	??_UART_Init+7,f
   590  0719                     u310:	
   591  0719  3EFF               	addlw	-1
   592  071A  1D03               	skipz
   593  071B  2F14               	goto	u315
   594  071C  3000               	movlw	0
   595  071D  00B2               	movwf	??_UART_Init+8
   596  071E  3009               	movlw	9
   597  071F  00B3               	movwf	??_UART_Init+9
   598  0720  303D               	movlw	61
   599  0721  00B4               	movwf	??_UART_Init+10
   600  0722  3000               	movlw	0
   601  0723  00B5               	movwf	??_UART_Init+11
   602  0724  082E               	movf	??_UART_Init+4,w
   603  0725  02B2               	subwf	??_UART_Init+8,f
   604  0726  082F               	movf	??_UART_Init+5,w
   605  0727  1C03               	skipc
   606  0728  0F2F               	incfsz	??_UART_Init+5,w
   607  0729  2F2B               	goto	u321
   608  072A  2F2C               	goto	u322
   609  072B                     u321:	
   610  072B  02B3               	subwf	??_UART_Init+9,f
   611  072C                     u322:	
   612  072C  0830               	movf	??_UART_Init+6,w
   613  072D  1C03               	skipc
   614  072E  0F30               	incfsz	??_UART_Init+6,w
   615  072F  2F31               	goto	u323
   616  0730  2F32               	goto	u324
   617  0731                     u323:	
   618  0731  02B4               	subwf	??_UART_Init+10,f
   619  0732                     u324:	
   620  0732  0831               	movf	??_UART_Init+7,w
   621  0733  1C03               	skipc
   622  0734  0F31               	incfsz	??_UART_Init+7,w
   623  0735  2F37               	goto	u325
   624  0736  2F38               	goto	u326
   625  0737                     u325:	
   626  0737  02B5               	subwf	??_UART_Init+11,f
   627  0738                     u326:	
   628  0738  0835               	movf	??_UART_Init+11,w
   629  0739  00F7               	movwf	___aldiv@dividend+3
   630  073A  0834               	movf	??_UART_Init+10,w
   631  073B  00F6               	movwf	___aldiv@dividend+2
   632  073C  0833               	movf	??_UART_Init+9,w
   633  073D  00F5               	movwf	___aldiv@dividend+1
   634  073E  0832               	movf	??_UART_Init+8,w
   635  073F  00F4               	movwf	___aldiv@dividend
   636  0740  2757               	fcall	___aldiv
   637  0741  0871               	movf	?___aldiv+1,w
   638  0742  00FA               	movwf	UART_Init@x+1
   639  0743  0870               	movf	?___aldiv,w
   640  0744  00F9               	movwf	UART_Init@x
   641  0745                     l805:	
   642                           
   643                           ;./uart.h: 8:     TXSTAbits.BRGH = 1;
   644  0745  1683               	bsf	3,5	;RP0=1, select bank1
   645  0746  1303               	bcf	3,6	;RP1=0, select bank1
   646  0747  1518               	bsf	24,2	;volatile
   647  0748                     l807:	
   648                           
   649                           ;./uart.h: 9:     SPBRG = x;
   650  0748  0879               	movf	UART_Init@x,w
   651  0749  0099               	movwf	25	;volatile
   652  074A                     l809:	
   653                           
   654                           ;./uart.h: 10:     TXSTAbits.SYNC = 0;
   655  074A  1218               	bcf	24,4	;volatile
   656  074B                     l811:	
   657                           
   658                           ;./uart.h: 11:     RCSTAbits.SPEN = 1;
   659  074B  1283               	bcf	3,5	;RP0=0, select bank0
   660  074C  1303               	bcf	3,6	;RP1=0, select bank0
   661  074D  1798               	bsf	24,7	;volatile
   662  074E                     l813:	
   663                           
   664                           ;./uart.h: 12:     TRISBbits.TRISB1 = 1;
   665  074E  1683               	bsf	3,5	;RP0=1, select bank1
   666  074F  1303               	bcf	3,6	;RP1=0, select bank1
   667  0750  1486               	bsf	6,1	;volatile
   668  0751                     l815:	
   669                           
   670                           ;./uart.h: 13:     TRISBbits.TRISB2 = 0;
   671  0751  1106               	bcf	6,2	;volatile
   672  0752                     l817:	
   673                           
   674                           ;./uart.h: 14:     TXSTAbits.TXEN = 1;
   675  0752  1698               	bsf	24,5	;volatile
   676  0753                     l819:	
   677                           
   678                           ;./uart.h: 15:     RCSTAbits.CREN = 1;
   679  0753  1283               	bcf	3,5	;RP0=0, select bank0
   680  0754  1303               	bcf	3,6	;RP1=0, select bank0
   681  0755  1618               	bsf	24,4	;volatile
   682  0756                     l19:	
   683  0756  0008               	return
   684  0757                     __end_of_UART_Init:	
   685                           
   686                           	psect	text3
   687  0757                     __ptext3:	
   688 ;; *************** function ___aldiv *****************
   689 ;; Defined at:
   690 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  divisor         4    0[COMMON] long 
   693 ;;  dividend        4    4[COMMON] long 
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  quotient        4    2[BANK0 ] long 
   696 ;;  sign            1    1[BANK0 ] unsigned char 
   697 ;;  counter         1    0[BANK0 ] unsigned char 
   698 ;; Return value:  Size  Location     Type
   699 ;;                  4    0[COMMON] long 
   700 ;; Registers used:
   701 ;;		wreg, status,2, status,0
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   707 ;;      Params:         8       0       0       0
   708 ;;      Locals:         0       6       0       0
   709 ;;      Temps:          1       0       0       0
   710 ;;      Totals:         9       6       0       0
   711 ;;Total ram usage:       15 bytes
   712 ;; Hardware stack levels used:    1
   713 ;; This function calls:
   714 ;;		Nothing
   715 ;; This function is called by:
   716 ;;		_UART_Init
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720                           
   721                           ;psect for function ___aldiv
   722  0757                     ___aldiv:	
   723  0757                     l763:	
   724                           ;incstack = 0
   725                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   726                           
   727  0757  1283               	bcf	3,5	;RP0=0, select bank0
   728  0758  1303               	bcf	3,6	;RP1=0, select bank0
   729  0759  01A1               	clrf	___aldiv@sign
   730  075A                     l765:	
   731  075A  1FF3               	btfss	___aldiv@divisor+3,7
   732  075B  2F5D               	goto	u201
   733  075C  2F5E               	goto	u200
   734  075D                     u201:	
   735  075D  2F6B               	goto	l210
   736  075E                     u200:	
   737  075E                     l767:	
   738  075E  09F0               	comf	___aldiv@divisor,f
   739  075F  09F1               	comf	___aldiv@divisor+1,f
   740  0760  09F2               	comf	___aldiv@divisor+2,f
   741  0761  09F3               	comf	___aldiv@divisor+3,f
   742  0762  0AF0               	incf	___aldiv@divisor,f
   743  0763  1903               	skipnz
   744  0764  0AF1               	incf	___aldiv@divisor+1,f
   745  0765  1903               	skipnz
   746  0766  0AF2               	incf	___aldiv@divisor+2,f
   747  0767  1903               	skipnz
   748  0768  0AF3               	incf	___aldiv@divisor+3,f
   749  0769  01A1               	clrf	___aldiv@sign
   750  076A  0AA1               	incf	___aldiv@sign,f
   751  076B                     l210:	
   752  076B  1FF7               	btfss	___aldiv@dividend+3,7
   753  076C  2F6E               	goto	u211
   754  076D  2F6F               	goto	u210
   755  076E                     u211:	
   756  076E  2F7E               	goto	l773
   757  076F                     u210:	
   758  076F                     l769:	
   759  076F  09F4               	comf	___aldiv@dividend,f
   760  0770  09F5               	comf	___aldiv@dividend+1,f
   761  0771  09F6               	comf	___aldiv@dividend+2,f
   762  0772  09F7               	comf	___aldiv@dividend+3,f
   763  0773  0AF4               	incf	___aldiv@dividend,f
   764  0774  1903               	skipnz
   765  0775  0AF5               	incf	___aldiv@dividend+1,f
   766  0776  1903               	skipnz
   767  0777  0AF6               	incf	___aldiv@dividend+2,f
   768  0778  1903               	skipnz
   769  0779  0AF7               	incf	___aldiv@dividend+3,f
   770  077A                     l771:	
   771  077A  3001               	movlw	1
   772  077B  00F8               	movwf	??___aldiv
   773  077C  0878               	movf	??___aldiv,w
   774  077D  06A1               	xorwf	___aldiv@sign,f
   775  077E                     l773:	
   776  077E  3000               	movlw	0
   777  077F  00A5               	movwf	___aldiv@quotient+3
   778  0780  3000               	movlw	0
   779  0781  00A4               	movwf	___aldiv@quotient+2
   780  0782  3000               	movlw	0
   781  0783  00A3               	movwf	___aldiv@quotient+1
   782  0784  3000               	movlw	0
   783  0785  00A2               	movwf	___aldiv@quotient
   784  0786                     l775:	
   785  0786  0873               	movf	___aldiv@divisor+3,w
   786  0787  0472               	iorwf	___aldiv@divisor+2,w
   787  0788  0471               	iorwf	___aldiv@divisor+1,w
   788  0789  0470               	iorwf	___aldiv@divisor,w
   789  078A  1903               	skipnz
   790  078B  2F8D               	goto	u221
   791  078C  2F8E               	goto	u220
   792  078D                     u221:	
   793  078D  2FDB               	goto	l795
   794  078E                     u220:	
   795  078E                     l777:	
   796  078E  01A0               	clrf	___aldiv@counter
   797  078F  0AA0               	incf	___aldiv@counter,f
   798  0790  2F9E               	goto	l781
   799  0791                     l779:	
   800  0791  3001               	movlw	1
   801  0792  00F8               	movwf	??___aldiv
   802  0793                     u235:	
   803  0793  1003               	clrc
   804  0794  0DF0               	rlf	___aldiv@divisor,f
   805  0795  0DF1               	rlf	___aldiv@divisor+1,f
   806  0796  0DF2               	rlf	___aldiv@divisor+2,f
   807  0797  0DF3               	rlf	___aldiv@divisor+3,f
   808  0798  0BF8               	decfsz	??___aldiv,f
   809  0799  2F93               	goto	u235
   810  079A  3001               	movlw	1
   811  079B  00F8               	movwf	??___aldiv
   812  079C  0878               	movf	??___aldiv,w
   813  079D  07A0               	addwf	___aldiv@counter,f
   814  079E                     l781:	
   815  079E  1FF3               	btfss	___aldiv@divisor+3,7
   816  079F  2FA1               	goto	u241
   817  07A0  2FA2               	goto	u240
   818  07A1                     u241:	
   819  07A1  2F91               	goto	l779
   820  07A2                     u240:	
   821  07A2                     l783:	
   822  07A2  3001               	movlw	1
   823  07A3  00F8               	movwf	??___aldiv
   824  07A4                     u255:	
   825  07A4  1003               	clrc
   826  07A5  0DA2               	rlf	___aldiv@quotient,f
   827  07A6  0DA3               	rlf	___aldiv@quotient+1,f
   828  07A7  0DA4               	rlf	___aldiv@quotient+2,f
   829  07A8  0DA5               	rlf	___aldiv@quotient+3,f
   830  07A9  0BF8               	decfsz	??___aldiv,f
   831  07AA  2FA4               	goto	u255
   832  07AB                     l785:	
   833  07AB  0873               	movf	___aldiv@divisor+3,w
   834  07AC  0277               	subwf	___aldiv@dividend+3,w
   835  07AD  1D03               	skipz
   836  07AE  2FB9               	goto	u265
   837  07AF  0872               	movf	___aldiv@divisor+2,w
   838  07B0  0276               	subwf	___aldiv@dividend+2,w
   839  07B1  1D03               	skipz
   840  07B2  2FB9               	goto	u265
   841  07B3  0871               	movf	___aldiv@divisor+1,w
   842  07B4  0275               	subwf	___aldiv@dividend+1,w
   843  07B5  1D03               	skipz
   844  07B6  2FB9               	goto	u265
   845  07B7  0870               	movf	___aldiv@divisor,w
   846  07B8  0274               	subwf	___aldiv@dividend,w
   847  07B9                     u265:	
   848  07B9  1C03               	skipc
   849  07BA  2FBC               	goto	u261
   850  07BB  2FBD               	goto	u260
   851  07BC                     u261:	
   852  07BC  2FCC               	goto	l791
   853  07BD                     u260:	
   854  07BD                     l787:	
   855  07BD  0870               	movf	___aldiv@divisor,w
   856  07BE  02F4               	subwf	___aldiv@dividend,f
   857  07BF  0871               	movf	___aldiv@divisor+1,w
   858  07C0  1C03               	skipc
   859  07C1  0F71               	incfsz	___aldiv@divisor+1,w
   860  07C2  02F5               	subwf	___aldiv@dividend+1,f
   861  07C3  0872               	movf	___aldiv@divisor+2,w
   862  07C4  1C03               	skipc
   863  07C5  0F72               	incfsz	___aldiv@divisor+2,w
   864  07C6  02F6               	subwf	___aldiv@dividend+2,f
   865  07C7  0873               	movf	___aldiv@divisor+3,w
   866  07C8  1C03               	skipc
   867  07C9  0F73               	incfsz	___aldiv@divisor+3,w
   868  07CA  02F7               	subwf	___aldiv@dividend+3,f
   869  07CB                     l789:	
   870  07CB  1422               	bsf	___aldiv@quotient,0
   871  07CC                     l791:	
   872  07CC  3001               	movlw	1
   873  07CD                     u275:	
   874  07CD  1003               	clrc
   875  07CE  0CF3               	rrf	___aldiv@divisor+3,f
   876  07CF  0CF2               	rrf	___aldiv@divisor+2,f
   877  07D0  0CF1               	rrf	___aldiv@divisor+1,f
   878  07D1  0CF0               	rrf	___aldiv@divisor,f
   879  07D2  3EFF               	addlw	-1
   880  07D3  1D03               	skipz
   881  07D4  2FCD               	goto	u275
   882  07D5                     l793:	
   883  07D5  3001               	movlw	1
   884  07D6  02A0               	subwf	___aldiv@counter,f
   885  07D7  1D03               	btfss	3,2
   886  07D8  2FDA               	goto	u281
   887  07D9  2FDB               	goto	u280
   888  07DA                     u281:	
   889  07DA  2FA2               	goto	l783
   890  07DB                     u280:	
   891  07DB                     l795:	
   892  07DB  0821               	movf	___aldiv@sign,w
   893  07DC  1903               	btfsc	3,2
   894  07DD  2FDF               	goto	u291
   895  07DE  2FE0               	goto	u290
   896  07DF                     u291:	
   897  07DF  2FEB               	goto	l799
   898  07E0                     u290:	
   899  07E0                     l797:	
   900  07E0  09A2               	comf	___aldiv@quotient,f
   901  07E1  09A3               	comf	___aldiv@quotient+1,f
   902  07E2  09A4               	comf	___aldiv@quotient+2,f
   903  07E3  09A5               	comf	___aldiv@quotient+3,f
   904  07E4  0AA2               	incf	___aldiv@quotient,f
   905  07E5  1903               	skipnz
   906  07E6  0AA3               	incf	___aldiv@quotient+1,f
   907  07E7  1903               	skipnz
   908  07E8  0AA4               	incf	___aldiv@quotient+2,f
   909  07E9  1903               	skipnz
   910  07EA  0AA5               	incf	___aldiv@quotient+3,f
   911  07EB                     l799:	
   912  07EB  0825               	movf	___aldiv@quotient+3,w
   913  07EC  00F3               	movwf	?___aldiv+3
   914  07ED  0824               	movf	___aldiv@quotient+2,w
   915  07EE  00F2               	movwf	?___aldiv+2
   916  07EF  0823               	movf	___aldiv@quotient+1,w
   917  07F0  00F1               	movwf	?___aldiv+1
   918  07F1  0822               	movf	___aldiv@quotient,w
   919  07F2  00F0               	movwf	?___aldiv
   920  07F3                     l220:	
   921  07F3  0008               	return
   922  07F4                     __end_of___aldiv:	
   923  007E                     btemp	set	126	;btemp
   924  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        25
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     53      78
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0     710
                                             22 BANK0     31    31      0
                          _UART_Init
                         _UART_Write
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     595
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _UART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     35      4E       3       97.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      59      10        0.0%
ABS                  0      0      59       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Nov 10 14:00:37 2019

                      pc 0002                       l40 066E                       l19 0756  
                     l43 0678                       l59 06EF                       fsr 0004  
                    l210 076B                      l220 07F3                      l811 074B  
                    l803 06F0                      l813 074E                      l805 0745  
                    l815 0751                      l807 0748                      l823 066E  
                    l817 0752                      l809 074A                      l825 0674  
                    l841 06C6                      l771 077A                      l763 0757  
                    l819 0753                      l843 06CB                      l835 06A1  
                    l781 079E                      l773 077E                      l765 075A  
                    l845 06DA                      l837 06AC                      l791 07CC  
                    l783 07A2                      l775 0786                      l767 075E  
                    l847 06E2                      l839 06C3                      l793 07D5  
                    l785 07AB                      l777 078E                      l769 076F  
                    l849 06EB                      l787 07BD                      l779 0791  
                    l795 07DB                      l797 07E0                      l789 07CB  
                    l799 07EB                      u200 075E                      u201 075D  
                    u210 076F                      u211 076E                      u220 078E  
                    u300 0700                      u221 078D                      u310 0719  
                    u240 07A2                      u241 07A1                      u321 072B  
                    u305 06FB                      u322 072C                      u330 0674  
                    u235 0793                      u323 0731                      u315 0714  
                    u331 0673                      u260 07BD                      u324 0732  
                    u261 07BC                      u325 0737                      u326 0738  
                    u350 06B6                      u255 07A4                      u280 07DB  
                    u360 06EB                      u281 07DA                      u265 07B9  
                    u361 06EA                      u290 07E0                      u291 07DF  
                    u275 07CD                      u377 06D3                      fsr0 0004  
                    indf 0000                     _main 06A1                     btemp 007E  
                   start 0000          __end_of___aldiv 07F4                    ?_main 0070  
                  _RCREG 001A                    _SPBRG 0099                    _TXREG 0019  
            ?_UART_Write 0070       __size_of_UART_Init 0067                    main@i 0053  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07F4             __end_of_main 06F0                   ??_main 0036  
      __end_of_UART_Init 0757      __size_of_UART_Write 000C                ??___aldiv 0078  
__end_of__initialization 07FE           __pcstackCOMMON 0070             __pidataBANK0 0688  
             __pmaintext 06A1             ??_UART_Write 0070                  ___aldiv 0757  
     __end_of_UART_Write 0679                  __ptext1 066D                  __ptext2 06F0  
                __ptext3 0757         ___aldiv@dividend 0074     end_of_initialization 07FE  
              _RCSTAbits 0018         ___aldiv@quotient 0022                _UART_Init 06F0  
         UART_Write@data 0070                _TRISBbits 0086                _TXSTAbits 0098  
             ?_UART_Init 0026      start_initialization 07F4               init_fetch0 0679  
            __pdataBANK0 0055                ___latbits 0000            __pcstackBANK0 0020  
               ?___aldiv 0070              ??_UART_Init 002A               UART_Init@x 0079  
        ___aldiv@divisor 0070          ___aldiv@counter 0020                 _PIR1bits 000C  
      UART_Init@baudrate 0026                main@frase 003A         __size_of___aldiv 009D  
          __size_of_main 004F                 main@F486 0055                 init_ram0 067D  
           ___aldiv@sign 0021               _UART_Write 066D  
